import bayes_coin_game
import numpy
import pytest
from pathlib import Path


PLOT_ROOT = Path(__file__).parents[0] / '../figures'

R_PRIOR_1 = numpy.array(
    [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
     1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
     1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
     1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
     1., 1., 1., 1.])
R_POSTERIOR_1 = numpy.array(
    [0.00000000e+00, 8.81567610e-23, 1.35815556e-18, 3.72583944e-16,
     1.96372506e-14, 4.19031193e-13, 5.04561801e-12, 4.09259430e-11,
     2.48546323e-10, 1.20989967e-09, 4.94583030e-09, 1.75506335e-08,
     5.54054047e-08, 1.58524653e-07, 4.17066421e-07, 1.02059283e-06,
     2.34448513e-06, 5.09409670e-06, 1.05347530e-05, 2.08444052e-05,
     3.96352551e-05, 7.27004190e-05, 1.29050905e-04, 2.22315851e-04,
     3.72583944e-04, 6.08764910e-04, 9.71545632e-04, 1.51700443e-03,
     2.32092818e-03, 3.48384947e-03, 5.13678373e-03, 7.44760031e-03,
     1.06279055e-02, 1.49402527e-02, 2.07054250e-02, 2.83094633e-02,
     3.82100388e-02, 5.09417013e-02, 6.71194724e-02, 8.74402059e-02,
     1.12681111e-01, 1.43694825e-01, 1.81400454e-01, 2.26770058e-01,
     2.80810135e-01, 3.44537837e-01, 4.18951773e-01, 5.04997519e-01,
     6.03528177e-01, 7.15260625e-01, 8.40728388e-01, 9.80232417e-01,
     1.13379132e+00, 1.30109299e+00, 1.48144964e+00, 1.67375884e+00,
     1.87647284e+00, 2.08757887e+00, 2.30459291e+00, 2.52456922e+00,
     2.74412771e+00, 2.95950066e+00, 3.16659972e+00, 3.36110336e+00,
     3.53856415e+00, 3.69453399e+00, 3.82470469e+00, 3.92505981e+00,
     3.99203290e+00, 4.02266595e+00, 4.01476120e+00, 3.96701864e+00,
     3.87915119e+00, 3.75196951e+00, 3.58742887e+00, 3.38863123e+00,
     3.15977733e+00, 2.90606557e+00, 2.63353671e+00, 2.34886698e+00,
     2.05911496e+00, 1.77143192e+00, 1.49274846e+00, 1.22945422e+00,
     9.87089950e-01, 7.70073796e-01, 5.81483777e-01, 4.22918014e-01,
     2.94450769e-01, 1.94697002e-01, 1.20989967e-01, 6.96656327e-02,
     3.64348507e-02, 1.68100093e-02, 6.53896703e-03, 1.98787739e-03,
     4.09660379e-04, 4.15798985e-05, 7.50005125e-07, 0.00000000e+00])

R_PRIOR_2 = numpy.array(
    [0.00000000e+00, 2.50970431e-68, 8.54731313e-54, 2.18663728e-45,
     1.73356880e-39, 5.78548653e-35, 2.59788903e-31, 2.91710693e-28,
     1.18572079e-25, 2.21467893e-23, 2.23694432e-21, 1.37226301e-19,
     5.57018068e-18, 1.59658933e-16, 3.39895924e-15, 5.59373076e-14,
     7.34937698e-13, 7.91445041e-12, 7.13942972e-11, 5.49389882e-10,
     3.66220042e-09, 2.14252462e-08, 1.11250441e-07, 5.17696030e-07,
     2.17719635e-06, 8.33603520e-06, 2.92454996e-05, 9.45500182e-05,
     2.83104955e-04, 7.88588983e-04, 2.05159568e-03, 5.00270125e-03,
     1.14698864e-02, 2.47959495e-02, 5.06717914e-02, 9.81064919e-02,
     1.80324322e-01, 3.15226059e-01, 5.24931939e-01, 8.33915144e-01,
     1.26541504e+00, 1.83622338e+00, 2.55051572e+00, 3.39400513e+00,
     4.33009855e+00, 5.29971181e+00, 6.22581499e+00, 7.02269367e+00,
     7.60858870e+00, 7.91923046e+00, 7.91923046e+00, 7.60858870e+00,
     7.02269367e+00, 6.22581499e+00, 5.29971181e+00, 4.33009855e+00,
     3.39400513e+00, 2.55051572e+00, 1.83622338e+00, 1.26541504e+00,
     8.33915144e-01, 5.24931939e-01, 3.15226059e-01, 1.80324322e-01,
     9.81064919e-02, 5.06717914e-02, 2.47959495e-02, 1.14698864e-02,
     5.00270125e-03, 2.05159568e-03, 7.88588983e-04, 2.83104955e-04,
     9.45500182e-05, 2.92454996e-05, 8.33603520e-06, 2.17719635e-06,
     5.17696030e-07, 1.11250441e-07, 2.14252462e-08, 3.66220042e-09,
     5.49389882e-10, 7.13942972e-11, 7.91445041e-12, 7.34937698e-13,
     5.59373076e-14, 3.39895924e-15, 1.59658933e-16, 5.57018068e-18,
     1.37226301e-19, 2.23694432e-21, 2.21467893e-23, 1.18572079e-25,
     2.91710693e-28, 2.59788903e-31, 5.78548653e-35, 1.73356880e-39,
     2.18663728e-45, 8.54731313e-54, 2.50970431e-68, 0.00000000e+00])
R_POSTERIOR_2 = numpy.array(
    [0.00000000e+00, 2.38658094e-90, 1.25220985e-71, 8.78817848e-61,
     3.67214438e-53, 2.61507546e-47, 1.41394641e-42, 1.28780180e-38,
     3.17897976e-35, 2.89040113e-32, 1.19341741e-29, 2.59793414e-27,
     3.32904296e-25, 2.73015949e-23, 1.52914675e-21, 6.15817545e-20,
     1.85864305e-18, 4.34896520e-17, 8.11308197e-16, 1.23528779e-14,
     1.56574759e-13, 1.68019899e-12, 1.54867676e-11, 1.24149007e-10,
     8.75023504e-10, 5.47402953e-09, 3.06492769e-08, 1.54719998e-07,
     7.08772989e-07, 2.96352143e-06, 1.13679209e-05, 4.01900841e-05,
     1.31493652e-04, 3.99610298e-04, 1.13174450e-03, 2.99590038e-03,
     7.43241194e-03, 1.73218209e-02, 3.80057683e-02, 7.86558481e-02,
     1.53809124e-01, 2.84619482e-01, 4.99073329e-01, 8.30225734e-01,
     1.31162155e+00, 1.96964139e+00, 2.81357326e+00, 3.82552420e+00,
     4.95335717e+00, 6.11005732e+00, 7.18185577e+00, 8.04509458e+00,
     8.58884647e+00, 8.73780868e+00, 8.46909746e+00, 7.81787368e+00,
     6.86993713e+00, 5.74339761e+00, 4.56475758e+00, 3.44602371e+00,
     2.46844903e+00, 1.67578934e+00, 1.07674600e+00, 6.53783810e-01,
     3.74474978e-01, 2.01940724e-01, 1.02300236e-01, 4.85627623e-02,
     2.15425280e-02, 8.90233084e-03, 3.41513920e-03, 1.21146172e-03,
     3.95636461e-04, 1.18363100e-04, 3.22582515e-05, 7.95829240e-06,
     1.76453103e-06, 3.48742708e-07, 6.08643774e-08, 9.27894322e-09,
     1.22027928e-09, 1.36422491e-10, 1.27439888e-11, 9.74677341e-13,
     5.95602174e-14, 2.82342520e-15, 1.00144894e-16, 2.54110992e-18,
     4.35861023e-20, 4.69799362e-22, 2.89040113e-24, 8.91043702e-27,
     1.14648223e-29, 4.71071179e-33, 4.08081606e-37, 3.71730898e-42,
     9.66270443e-49, 3.83363732e-58, 2.03041481e-74, 0.00000000e+00])

R_PRIOR_3 = numpy.array(
    [0.00000000e+00, 5.20510178e-08, 8.32816285e-07, 4.21613244e-06,
     1.33250606e-05, 3.25318861e-05, 6.74581190e-05, 1.24974494e-04,
     2.13200969e-04, 3.41506728e-04, 5.20510178e-04, 7.62078951e-04,
     1.07932990e-03, 1.48662912e-03, 1.99959190e-03, 2.63508278e-03,
     3.41121550e-03, 4.34735306e-03, 5.46410764e-03, 6.78334069e-03,
     8.32816285e-03, 1.01229340e-02, 1.21932632e-02, 1.45660089e-02,
     1.72692785e-02, 2.03324288e-02, 2.37860659e-02, 2.76620449e-02,
     3.19934704e-02, 3.68146959e-02, 4.21613244e-02, 4.80702080e-02,
     5.45794480e-02, 6.17283951e-02, 6.95576489e-02, 7.81090586e-02,
     8.74257223e-02, 9.75519875e-02, 1.08533451e-01, 1.20416959e-01,
     1.33250606e-01, 1.47083736e-01, 1.61966944e-01, 1.77952072e-01,
     1.95092212e-01, 2.13441705e-01, 2.33056142e-01, 2.53992363e-01,
     2.76308456e-01, 3.00063759e-01, 3.25318861e-01, 3.52135598e-01,
     3.80577054e-01, 4.10707567e-01, 4.42592719e-01, 4.76299345e-01,
     5.11895526e-01, 5.49450596e-01, 5.89035135e-01, 6.30720973e-01,
     6.74581190e-01, 7.20690116e-01, 7.69123328e-01, 8.19957653e-01,
     8.73271168e-01, 9.29143199e-01, 9.87654321e-01, 1.04888636e+00,
     1.11292238e+00, 1.17984672e+00, 1.24974494e+00, 1.32270386e+00,
     1.39881156e+00, 1.47815735e+00, 1.56083180e+00, 1.64692673e+00,
     1.73653522e+00, 1.82975156e+00, 1.92667134e+00, 2.02739136e+00,
     2.13200969e+00, 2.24062564e+00, 2.35333978e+00, 2.47025391e+00,
     2.59147110e+00, 2.71709566e+00, 2.84723315e+00, 2.98199037e+00,
     3.12147538e+00, 3.26579750e+00, 3.41506728e+00, 3.56939651e+00,
     3.72889827e+00, 3.89368685e+00, 4.06387780e+00, 4.23958793e+00,
     4.42093529e+00, 4.60803918e+00, 4.80102015e+00, 5.00000000e+00])
R_POSTERIOR_3 = numpy.array(
    [0.00000000e+00, 3.79388311e-30, 9.35185618e-25, 1.29878563e-21,
     2.16346049e-19, 1.12707987e-17, 2.81415290e-16, 4.22881977e-15,
     4.38122555e-14, 3.41623485e-13, 2.12846999e-12, 1.10583889e-11,
     4.94430708e-11, 1.94849161e-10, 6.89518127e-10, 2.22354473e-09,
     6.61234849e-09, 1.83101200e-08, 4.75929579e-08, 1.16904770e-07,
     2.72916606e-07, 6.08474543e-07, 1.30100839e-06, 2.67738049e-06,
     5.31982594e-06, 1.02338245e-05, 1.91066662e-05, 3.46952663e-05,
     6.13934654e-05, 1.06042436e-04, 1.79062491e-04, 2.95999827e-04,
     4.79596404e-04, 7.62503818e-04, 1.19077070e-03, 1.82823548e-03,
     2.76194994e-03, 4.10874002e-03, 6.02297750e-03, 8.70558420e-03,
     1.24142191e-02, 1.74745047e-02, 2.42920325e-02, 3.33647484e-02,
     4.52951608e-02, 6.08016407e-02, 8.07279046e-02, 1.06049591e-01,
     1.37876681e-01, 1.77450390e-01, 2.26133055e-01, 2.85389563e-01,
     3.56758907e-01, 4.41814673e-01, 5.42113536e-01, 6.59131340e-01,
     7.94186886e-01, 9.48354341e-01, 1.12236604e+00, 1.31650845e+00,
     1.53051518e+00, 1.76346198e+00, 2.01366976e+00, 2.27862253e+00,
     2.55490814e+00, 2.83818966e+00, 3.12321564e+00, 3.40387662e+00,
     3.67331425e+00, 3.92408723e+00, 4.14839593e+00, 4.33836369e+00,
     4.48636922e+00, 4.58541938e+00, 4.62954702e+00, 4.61421347e+00,
     4.53669068e+00, 4.39639424e+00, 4.19513662e+00, 3.93726920e+00,
     3.62968439e+00, 3.28165455e+00, 2.90449319e+00, 2.51103664e+00,
     2.11496018e+00, 1.72996122e+00, 1.36886219e+00, 1.04270514e+00,
     7.59926696e-01, 5.25711662e-01, 3.41623485e-01, 2.05594965e-01,
     1.12330224e-01, 5.41162966e-02, 2.19709524e-02, 6.96806727e-03,
     1.49739788e-03, 1.58415868e-04, 2.97712352e-06, 0.00000000e+00])


@pytest.fixture
def exercise_results_bayes_coin_game_scenario1():
    return bayes_coin_game.run_scenario(n=20, y_obs=14, alpha=1, beta=1,
                                        title='Scenario 1', plot_p=True,
                                        plot_root=PLOT_ROOT)


def test_r_prior_scenario_1(exercise_results_bayes_coin_game_scenario1):
    r_prior, _, _, _ = exercise_results_bayes_coin_game_scenario1
    assert r_prior == pytest.approx(R_PRIOR_1)


def test_r_posterior_scenario_1(exercise_results_bayes_coin_game_scenario1):
    _, r_posterior, _, _ = exercise_results_bayes_coin_game_scenario1
    assert r_posterior == pytest.approx(R_POSTERIOR_1)


def test_marginal_likelihood_scenario_1(exercise_results_bayes_coin_game_scenario1):
    _, _, marginal_likelihood, _ = exercise_results_bayes_coin_game_scenario1
    assert marginal_likelihood == pytest.approx(0.04761904761904764)


def test_probability_of_winning_scenario_1(exercise_results_bayes_coin_game_scenario1):
    _, _, _, probability_of_winning = exercise_results_bayes_coin_game_scenario1
    assert probability_of_winning == pytest.approx(0.4047040093758656)


@pytest.fixture
def exercise_results_bayes_coin_game_scenario2():
    return bayes_coin_game.run_scenario(n=20, y_obs=14, alpha=50, beta=50,
                                        title='Scenario 2', plot_p=True,
                                        plot_root=PLOT_ROOT)


def test_r_prior_scenario_2(exercise_results_bayes_coin_game_scenario2):
    r_prior, _, _, _ = exercise_results_bayes_coin_game_scenario2
    assert r_prior == pytest.approx(R_PRIOR_2)


def test_r_posterior_scenario_2(exercise_results_bayes_coin_game_scenario2):
    _, r_posterior, _, _ = exercise_results_bayes_coin_game_scenario2
    assert r_posterior == pytest.approx(R_POSTERIOR_2)


def test_marginal_likelihood_scenario_2(exercise_results_bayes_coin_game_scenario2):
    _, _, marginal_likelihood, _ = exercise_results_bayes_coin_game_scenario2
    assert marginal_likelihood == pytest.approx(0.04414512187268132)


def test_probability_of_winning_scenario_2(exercise_results_bayes_coin_game_scenario2):
    _, _, _, probability_of_winning = exercise_results_bayes_coin_game_scenario2
    assert probability_of_winning == pytest.approx(0.7586215827278409)


@pytest.fixture
def exercise_results_bayes_coin_game_scenario3():
    return bayes_coin_game.run_scenario(n=20, y_obs=14, alpha=5, beta=1,
                                        title='Scenario 3', plot_p=True,
                                        plot_root=PLOT_ROOT)


def test_r_prior_scenario_3(exercise_results_bayes_coin_game_scenario3):
    r_prior, _, _, _ = exercise_results_bayes_coin_game_scenario3
    assert r_prior == pytest.approx(R_PRIOR_3)


def test_r_posterior_scenario_3(exercise_results_bayes_coin_game_scenario3):
    _, r_posterior, _, _ = exercise_results_bayes_coin_game_scenario3
    assert r_posterior == pytest.approx(R_POSTERIOR_3)


def test_marginal_likelihood_scenario_3(exercise_results_bayes_coin_game_scenario3):
    _, _, marginal_likelihood, _ = exercise_results_bayes_coin_game_scenario3
    assert marginal_likelihood == pytest.approx(0.05759457933370968)


def test_probability_of_winning_scenario_3(exercise_results_bayes_coin_game_scenario3):
    _, _, _, probability_of_winning = exercise_results_bayes_coin_game_scenario3
    assert probability_of_winning == pytest.approx(0.29156872811586365)

